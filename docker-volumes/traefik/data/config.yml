http:
  routers:
    cockpit:
      entryPoints:
        - "https"
      rule: "Host(`cockpit.local.ðŸš¨$LOCAL_DOMAINðŸš¨`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: { }
      service: cockpit

    asusRouter:
      entryPoints:
        - "https"
      rule: "Host(`router.local.ðŸš¨$LOCAL_DOMAINðŸš¨`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: { }
      service: asusRouter

    dockerHostMetrics:
      entryPoints:
        - "https"
      rule: "Host(`docker-host-metrics.local.ðŸš¨$LOCAL_DOMAINðŸš¨`)"
      middlewares:
        - default-headers
        - https-redirectscheme
      tls: { }
      service: dockerHostMetrics

  services:
    dockerHostMetrics:
      loadBalancer:
        servers:
          - url: "ðŸš¨$DOCKER_HOST_METRICS_IP:PORTðŸš¨"
        passHostHeader: true

    cockpit:
      loadBalancer:
        servers:
          - url: "ðŸš¨$COCKPIT_SERVER_IP:PORTðŸš¨"
        passHostHeader: true
    asusRouter:
      loadBalancer:
        servers:
          - url: "ðŸš¨$ROUTER_IP:80ðŸš¨"

  middlewares:
    https-redirectscheme:
      redirectScheme:
        scheme: https
        permanent: true
    default-headers:
      headers:
        frameDeny: true
        browserXssFilter: true
        contentTypeNosniff: true
        forceSTSHeader: true
        stsIncludeSubdomains: true
        stsPreload: true
        stsSeconds: 15552000
        customFrameOptionsValue: SAMEORIGIN
        customRequestHeaders:
          X-Forwarded-Proto: https

    default-whitelist:
      ipWhiteList:
        sourceRange:
          - "10.0.0.0/8"
          - "192.168.0.0/16"
          - "172.16.0.0/12"

    secured:
      chain:
        middlewares:
          - default-whitelist
          - default-headers